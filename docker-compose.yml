services:
  petric:
    build: {context: ., target: sirf}
    image: synerbi/sirf:ci
    # quick test of installed libraries
    deploy: {resources: {reservations: {devices: [{driver: nvidia, count: all, capabilities: [gpu]}]}}}
    command:
    - python
    - -c
    - |
       import torch, tensorflow as tf
       print("torch:", torch.cuda.is_available(), "| tf:", tf.config.list_physical_devices("GPU"))
  leaderboard:
    networks: [reverse_proxy]
    build: {context: ., target: leaderboard}
    restart: always
    expose: [6006]
    command: "tensorboard --logdir=/logs --bind_all --window_title='PETRIC Leaderboard' --path_prefix /leaderboard"
    volumes: ["/opt/runner/logs:/logs"]
    healthcheck: {test: "wget --spider localhost:6006/leaderboard"}
    labels:
      virtual.host: petric.tomography.stfc.ac.uk
      virtual.tls-email: casper.da-costa-luis@stfc.ac.uk
      # /leaderboard -> leaderboard:6006
      virtual.port: 6006
      virtual.proxy.matcher: /leaderboard*
      # /data -> caddy:/share/petric
      # /data-wip -> caddy:/share-rw/petric-wip
      # / -> wiki
      virtual.host.directives: |
        handle /data* {
          reverse_proxy http://data
        }
        handle /data-wip* {
          import ext_auth
          reverse_proxy http://data-wip
        }
        redir / https://github.com/SyneRBI/PETRIC/wiki
  data:
    networks: [reverse_proxy]
    image: filebrowser/filebrowser:latest
    restart: always
    volumes: ["/mnt/share/petric:/srv:ro", "./filebrowser/petric.db:/database.db"]
    user: "1005:1005"
    command: [--noauth, -d=/database.db, -b=/data, -l=stdout]
  data-wip:
    networks: [reverse_proxy]
    image: filebrowser/filebrowser:latest
    restart: always
    volumes: ["/mnt/share/petric-wip:/srv", "./filebrowser/petric-wip.db:/database.db"]
    user: "1005:1005"
    command: [--noauth, -d=/database.db, -b=/data-wip, -l=stdout]
networks: {reverse_proxy: {external: true}}
